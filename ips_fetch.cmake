function(ips_is_target_exists name out_is_exist)
    find_package(${name} QUIET)
    if (${name}_FOUND OR TARGET ${name})
        set(${out_is_exist} ON PARENT_SCOPE)
        return()
    endif ()

    set(${out_is_exist} OFF PARENT_SCOPE)
endfunction()

function(ips_fetch name)
    cmake_parse_arguments(IPS "" "GIT_REPOSITORY;GIT_TAG;SOURCE_DIR;LOCAL_DIR" "" ${ARGN} )

    ips_is_target_exists(${name} is_exist)
    if (is_exist)
        message(STATUS "Add target: ${name} (already install)")
        return()
    endif()

    if (IPS_LOCAL_DIR)
        if (EXISTS IPS_LOCAL_DIR)
            set(IPS_GIT_REPOSITORY ${IPS_LOCAL_DIR})
            set(opts "${opts} | local path: ${IPS_LOCAL_DIR}")
        else ()
            message(FATAL_ERROR "For target ${name}: path '${IPS_LOCAL_DIR}' does not exist.")
        endif ()
    endif()

    if (IPS_GIT_TAG)
        set(opts "${opts} | tag: ${IPS_GIT_TAG}")
        set(fetch_cmd ${fetch_cmd} GIT_TAG ${IPS_GIT_TAG})
    elseif (IPS_PREFER_GIT_TAG)
        execute_process(COMMAND ${GIT_EXECUTABLE} ls-remote ${IPS_GIT_REPOSITORY} rev-list ${IPS_PREFER_GIT_TAG}
                OUTPUT_VARIABLE is_exist)
        if (is_exist)
            set(opts "${opts} | tag(prefer): ${IPS_PREFER_GIT_TAG}")
            set(fetch_cmd ${fetch_cmd} GIT_TAG ${IPS_PREFER_GIT_TAG})
        endif ()
    endif ()
    if (IPS_SOURCE_DIR)
        set(fetch_cmd ${fetch_cmd} SOURCE_DIR ${IPS_SOURCE_DIR})
        set(opts "${opts} | source path: ${IPS_SOURCE_DIR}")
    endif ()
    if (IPS_UNPARSED_ARGUMENTS)
        set(fetch_cmd ${fetch_cmd} ${IPS_UNPARSED_ARGUMENTS})
        set(opts "${opts} | args: ${IPS_UNPARSED_ARGUMENTS}")
    endif ()
    set(fetch_cmd GIT_REPOSITORY ${IPS_GIT_REPOSITORY} GIT_SHALLOW TRUE ${fetch_cmd})

    include(FetchContent)
    FetchContent_Declare(${PROJECT_NAME}.${name} ${fetch_cmd})
    set(CMAKE_MESSAGE_LOG_LEVEL NOTICE)
    FetchContent_MakeAvailable(${PROJECT_NAME}.${name})
    unset(CMAKE_MESSAGE_LOG_LEVEL)
    message(STATUS "Add target: ${name}${opts}")
endfunction()
